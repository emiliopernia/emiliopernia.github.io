{"ast":null,"code":"import _objectSpread from\"C:/Users/emili/Desktop/facu/react/practica/e-commerce/e-commerce/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/emili/Desktop/facu/react/practica/e-commerce/e-commerce/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{createSlice}from\"@reduxjs/toolkit\";export var cartSlice=createSlice({name:'cart',initialState:{cartItems:[]},reducers:{cartItems:function cartItems(state,action){state.cartItems=[].concat(_toConsumableArray(state.cartItems),[action.payload]);},deleteItem:function deleteItem(state,action){state.cartItems=action.payload;},modifyItem:function modifyItem(state,action){var updatedItem=action.payload;// Create a new copy of cartItems with the item updated\nvar newCartItems=state.cartItems.map(function(item){if(item.id===updatedItem.id){return _objectSpread(_objectSpread({},item),updatedItem);}return item;});// Return a new state object with the updated cartItems array\nreturn _objectSpread(_objectSpread({},state),{},{cartItems:newCartItems});}}});var _cartSlice$actions=cartSlice.actions,cartItems=_cartSlice$actions.cartItems,deleteItem=_cartSlice$actions.deleteItem,modifyItem=_cartSlice$actions.modifyItem;export{cartItems,deleteItem,modifyItem};export default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","cartItems","reducers","state","action","payload","deleteItem","modifyItem","updatedItem","newCartItems","map","item","id","actions","reducer"],"sources":["C:/Users/emili/Desktop/facu/react/practica/e-commerce/e-commerce/src/features/cart.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        cartItems: [],\r\n    },\r\n    reducers: {\r\n        cartItems: (state, action) => {\r\n            state.cartItems = [...state.cartItems, action.payload]\r\n        },\r\n        deleteItem: (state, action) => {\r\n            state.cartItems = action.payload\r\n        },\r\n        modifyItem: (state, action) => {\r\n            const updatedItem = action.payload;\r\n            // Create a new copy of cartItems with the item updated\r\n            const newCartItems = state.cartItems.map((item) => {\r\n                if (item.id === updatedItem.id) {\r\n                    return { ...item, ...updatedItem };\r\n                }\r\n                return item;\r\n            });\r\n            // Return a new state object with the updated cartItems array\r\n            return {\r\n                ...state,\r\n                cartItems: newCartItems,\r\n            };\r\n        }\r\n    }\r\n})\r\nexport const { cartItems, deleteItem, modifyItem } = cartSlice.actions;\r\nexport default cartSlice.reducer;"],"mappings":"mTAAA,OAASA,WAAW,KAAQ,kBAAkB,CAG9C,MAAO,IAAMC,UAAS,CAAGD,WAAW,CAAC,CACjCE,IAAI,CAAE,MAAM,CACZC,YAAY,CAAE,CACVC,SAAS,CAAE,EACf,CAAC,CACDC,QAAQ,CAAE,CACND,SAAS,CAAE,mBAACE,KAAK,CAAEC,MAAM,CAAK,CAC1BD,KAAK,CAACF,SAAS,8BAAOE,KAAK,CAACF,SAAS,GAAEG,MAAM,CAACC,OAAO,EAAC,CAC1D,CAAC,CACDC,UAAU,CAAE,oBAACH,KAAK,CAAEC,MAAM,CAAK,CAC3BD,KAAK,CAACF,SAAS,CAAGG,MAAM,CAACC,OAAO,CACpC,CAAC,CACDE,UAAU,CAAE,oBAACJ,KAAK,CAAEC,MAAM,CAAK,CAC3B,GAAMI,YAAW,CAAGJ,MAAM,CAACC,OAAO,CAClC;AACA,GAAMI,aAAY,CAAGN,KAAK,CAACF,SAAS,CAACS,GAAG,CAAC,SAACC,IAAI,CAAK,CAC/C,GAAIA,IAAI,CAACC,EAAE,GAAKJ,WAAW,CAACI,EAAE,CAAE,CAC5B,sCAAYD,IAAI,EAAKH,WAAW,EACpC,CACA,MAAOG,KAAI,CACf,CAAC,CAAC,CACF;AACA,sCACOR,KAAK,MACRF,SAAS,CAAEQ,YAAY,GAE/B,CACJ,CACJ,CAAC,CAAC,CACK,uBAA8CX,SAAS,CAACe,OAAO,CAAvDZ,SAAS,oBAATA,SAAS,CAAEK,UAAU,oBAAVA,UAAU,CAAEC,UAAU,oBAAVA,UAAU,CAAuB,wCACvE,cAAeT,UAAS,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}